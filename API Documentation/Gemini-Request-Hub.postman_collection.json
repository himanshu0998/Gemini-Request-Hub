{
	"info": {
		"_postman_id": "69a5126b-24d6-47da-b6d9-ce45ae75a2a7",
		"name": "Gemini-Request-Hub",
		"description": "- This documentation details all the flask based API endpoints developed as part of this project.\n- Port number for flask serves by default is 5000 and hence you will see the same in the url of all the requests.\n- The server is hosted on the local machine expected to have the necessary requirements already configured to run this server.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "11929943"
	},
	"item": [
		{
			"name": "User Sign Up",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 500\", function() {",
							"    pm.response.to.have.status(500);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - msg\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.msg).to.exist.and.to.be.a('string', \"Field 'msg' should be a string\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'msg' field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.msg).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is in an acceptable range\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\":\"testUser11\",\r\n    \"password\":\"TestPassword11\",\r\n    \"emailId\":\"testUser11@gmail.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/auth/signup",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"auth",
						"signup"
					]
				},
				"description": "- The `/auth/signup` api is used to register the first time user in the database. The user has to register and then sign in to use the other apis.\n- The request body contains 3 parameters `username` ,`password` and `emailId` as shown below.\n    \n- The username should be unique, not be more than 50 characters and password should be atleast 8 characters long, include atleast 1 uppercase alphabet, 1 lowercase alphabet and 1 number.\n- If the requirements are satified, the server would return a status code 201 response of creation of a user in the database.\n- Else, error response 400 would be thrown."
			},
			"response": []
		},
		{
			"name": "User Sign In",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - access_token\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.access_token).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Access token is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.access_token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Access token should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is in an acceptable range\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\":\"testUser1\",\r\n    \"password\":\"TestPassword1\"\r\n}"
				},
				"url": {
					"raw": "http://localhost:5000/auth/signin",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"auth",
						"signin"
					]
				},
				"description": "- This API is a key to use all the other APIs as it `returns the access-token` in the response body for the user who has correctly signed in the server. This access token is used as the token to access all ther APIs.\n    \n- The request body contains 2 parameters `username` and `password` as shown below.\n    \n- In case of invalid username, password, authorization token or expiration of it, appropriate response with code 401 will be thrown.\n    \n- Once the request is successfully executed, a `access-token` is returned in the response body for further use."
			},
			"response": []
		},
		{
			"name": "User Logout",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTcxMjQ2NjI0MCwianRpIjoiOTNkNTBiZjEtZGFhMy00MDZkLTg1NWItM2JlOGZkN2NiYzljIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6InRlc3RVc2VyMSIsIm5iZiI6MTcxMjQ2NjI0MCwiZXhwIjoxNzEyNDY3MTQwfQ.DxzOP4u7kOTQCYJ0Wp6PjH1666oiBqLQQfjaM2Dxrxw",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/auth/logout",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"auth",
						"logout"
					]
				},
				"description": "- This API is used to log out the current user by invalidating the JWT token.\n    \n- The request holds a `Authorization Bearer token` obtained after successful sign in of the user."
			},
			"response": []
		},
		{
			"name": "Current User Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.logged_in_as).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"The logged_in_as field should be a non-empty string\", function() {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.logged_in_as).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTcxMjI4MDUzMCwianRpIjoiYTQ2NzUxMDItOWE2ZS00M2Y4LWIxM2ItZjI2ZmNmZTI5MmM2IiwidHlwZSI6ImFjY2VzcyIsInN1YiI6InRlc3RVc2VyMSIsIm5iZiI6MTcxMjI4MDUzMCwiZXhwIjoxNzEyMjgxNDMwfQ.1tp7J6CAf6tUEg8bvLQx0OXtyAWKGy7RO__dFUhB6EA",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "application/json",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "http://localhost:5000/auth/protected",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"auth",
						"protected"
					]
				},
				"description": "- This API has a simple use to `return the username` of the currently logged in user.\n- The request holds a `Authorization Bearer token` obtained after successful sign in of the user.\n    \n- If the token has experied or incorrect, appropriate error is returned, else the `username` is returned in the body of the response."
			},
			"response": []
		},
		{
			"name": "Simple Prompt Processing",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 401\", function () {",
							"  pm.expect(pm.response.code).to.equal(401);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - msg\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.msg).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"The 'msg' field is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.msg).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTcxMjI3OTUyOSwianRpIjoiYmIxNGJlODgtNzFhYS00YzU3LTgyNzYtZGU3ZGJmZTllZmM0IiwidHlwZSI6ImFjY2VzcyIsInN1YiI6InRlc3RVc2VyMSIsIm5iZiI6MTcxMjI3OTUyOSwiZXhwIjoxNzEyMjgwNDI5fQ.cfMpIFRyGvhtX_CCkZAbL9zAolhIYodibLzlzUAHzPM",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"prompt\":\"Best UFC fighter of all times?..\"\r\n}"
				},
				"url": {
					"raw": "http://localhost:5000/text/prompt",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"text",
						"prompt"
					]
				},
				"description": "- This API enables the user to send a prompt to the server. The server then further utilises `Gemini Pro` to process the prompt and the response is then further relayed to the user in the response body of the user.\n- The request holds a `Authorization Bearer token` obtained after successful sign in of the user.\n    \n- The request body takes in 1 parameter `prompt`the value of which is the user question.\n- Any incorrect or missing paramater would result into appropriate error message with a corresponding status code.\n- Upon successfully processing the request, the prompt response is sent back to the user in the response."
			},
			"response": []
		},
		{
			"name": "Enabling Chat Session",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 401\", function () {",
							"  pm.expect(pm.response.code).to.equal(401);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - msg\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.msg).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.msg).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is in an acceptable range\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTcxMjI3OTUyOSwianRpIjoiYmIxNGJlODgtNzFhYS00YzU3LTgyNzYtZGU3ZGJmZTllZmM0IiwidHlwZSI6ImFjY2VzcyIsInN1YiI6InRlc3RVc2VyMSIsIm5iZiI6MTcxMjI3OTUyOSwiZXhwIjoxNzEyMjgwNDI5fQ.cfMpIFRyGvhtX_CCkZAbL9zAolhIYodibLzlzUAHzPM",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"prompt\":\"What is its capital?\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/text/chat",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"text",
						"chat"
					]
				},
				"description": "- This API enables the user to send a prompt to the server as part of a chat session. The difference between this and prompt API is that this is more of a chat session taking into account the historical chats of the user in the current session.\n- The request holds a `Authorization Bearer token` obtained after successful sign in of the user.\n    \n- The request body takes in 1 parameter `prompt`the value of which is the user question.\n- Any incorrect or missing paramater would result into appropriate error message with a corresponding status code.\n- Upon successfully processing the request, the prompt response is sent back to the user in the response."
			},
			"response": []
		},
		{
			"name": "Image Prompt Processing",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 401\", function () {",
							"  pm.expect(pm.response.code).to.equal(401);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - msg\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.msg).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is set to application/json\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"});",
							"",
							"",
							"pm.test(\"Validate that the value of msg field is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.msg).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is within an acceptable range\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTcxMjI3OTUyOSwianRpIjoiYmIxNGJlODgtNzFhYS00YzU3LTgyNzYtZGU3ZGJmZTllZmM0IiwidHlwZSI6ImFjY2VzcyIsInN1YiI6InRlc3RVc2VyMSIsIm5iZiI6MTcxMjI3OTUyOSwiZXhwIjoxNzEyMjgwNDI5fQ.cfMpIFRyGvhtX_CCkZAbL9zAolhIYodibLzlzUAHzPM",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "prompt",
							"value": "Describe the image in 50 words",
							"type": "text"
						},
						{
							"key": "image",
							"type": "file",
							"src": "postman-cloud:///1eef2265-5caf-4ef0-9f68-928226e67680"
						}
					]
				},
				"url": {
					"raw": "http://localhost:5000/image/process",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"image",
						"process"
					]
				},
				"description": "- This API utilises the capability of `Gemini-Vision-Pro` to process the prompt and the image and return an appropriate response to the user without maintaining any contextual history.\n- The request holds a `Authorization Bearer token` obtained after successful sign in of the user.\n    \n- The request body of the type form-data, takes in 2 parameters - `prompt` which is a text input and an `image` which is a file input. Locally postman stores the image in its cloud and the location is sent as shown below.\n- Here, `image` is a necessary parameter where as `prompt` is optional.\n- Based on the correctness of the input, if request is processed the response from the model is sent back in the response body, else error with appropriate status code is sent."
			},
			"response": []
		}
	]
}